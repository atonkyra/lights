/* SPDX-License-Identifier: GPL-2.0 */
#ifndef _UAPI_AURA_GPU_REGISTERS_H
#define _UAPI_AURA_GPU_REGISTERS_H

#include <linux/types.h>

#define SR(reg_name) .reg_name = mm ## reg_name

#define I2C_GENERIC_REG_LIST()\
    SR(GENERIC_I2C_CONTROL),\
    SR(GENERIC_I2C_INTERRUPT_CONTROL),\
    SR(GENERIC_I2C_STATUS),\
    SR(GENERIC_I2C_SPEED),\
    SR(GENERIC_I2C_SETUP),\
    SR(GENERIC_I2C_TRANSACTION),\
    SR(GENERIC_I2C_DATA),\
    SR(GENERIC_I2C_PIN_SELECTION)

#define I2C_SF(reg_name, field_name, post_fix)\
	.field_name = reg_name ## __ ## field_name ## post_fix

#define I2C_GENERIC_MASK_SH_LIST(mask_sh)\
    I2C_SF(GENERIC_I2C_CONTROL, GENERIC_I2C_GO, mask_sh),\
	I2C_SF(GENERIC_I2C_CONTROL, GENERIC_I2C_SOFT_RESET, mask_sh),\
	I2C_SF(GENERIC_I2C_CONTROL, GENERIC_I2C_SEND_RESET, mask_sh),\
	I2C_SF(GENERIC_I2C_CONTROL, GENERIC_I2C_ENABLE, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_STATUS, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_DONE, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_ABORTED, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_TIMEOUT, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_STOPPED_ON_NACK, mask_sh),\
	I2C_SF(GENERIC_I2C_STATUS, GENERIC_I2C_NACK, mask_sh),\
	I2C_SF(GENERIC_I2C_SPEED, GENERIC_I2C_THRESHOLD, mask_sh),\
	I2C_SF(GENERIC_I2C_SPEED, GENERIC_I2C_DISABLE_FILTER_DURING_STALL, mask_sh),\
	I2C_SF(GENERIC_I2C_SPEED, GENERIC_I2C_START_STOP_TIMING_CNTL, mask_sh),\
	I2C_SF(GENERIC_I2C_SPEED, GENERIC_I2C_PRESCALE, mask_sh),\
	I2C_SF(GENERIC_I2C_SETUP, GENERIC_I2C_DATA_DRIVE_EN, mask_sh),\
	I2C_SF(GENERIC_I2C_SETUP, GENERIC_I2C_DATA_DRIVE_SEL, mask_sh),\
	I2C_SF(GENERIC_I2C_SETUP, GENERIC_I2C_CLK_DRIVE_EN, mask_sh),\
	I2C_SF(GENERIC_I2C_SETUP, GENERIC_I2C_INTRA_BYTE_DELAY, mask_sh),\
	I2C_SF(GENERIC_I2C_SETUP, GENERIC_I2C_TIME_LIMIT, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_RW, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_STOP_ON_NACK, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_ACK_ON_READ, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_START, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_STOP, mask_sh),\
	I2C_SF(GENERIC_I2C_TRANSACTION, GENERIC_I2C_COUNT, mask_sh),\
	I2C_SF(GENERIC_I2C_DATA, GENERIC_I2C_DATA_RW, mask_sh),\
	I2C_SF(GENERIC_I2C_DATA, GENERIC_I2C_DATA, mask_sh),\
	I2C_SF(GENERIC_I2C_DATA, GENERIC_I2C_INDEX, mask_sh),\
	I2C_SF(GENERIC_I2C_DATA, GENERIC_I2C_INDEX_WRITE, mask_sh),\
	I2C_SF(GENERIC_I2C_PIN_SELECTION, GENERIC_I2C_SDA_PIN_SEL, mask_sh),\
	I2C_SF(GENERIC_I2C_PIN_SELECTION, GENERIC_I2C_SCL_PIN_SEL, mask_sh),\
    I2C_SF(GENERIC_I2C_INTERRUPT_CONTROL, GENERIC_I2C_DONE_INT, mask_sh),\
    I2C_SF(GENERIC_I2C_INTERRUPT_CONTROL, GENERIC_I2C_DONE_ACK, mask_sh),\
    I2C_SF(GENERIC_I2C_INTERRUPT_CONTROL, GENERIC_I2C_DONE_MASK, mask_sh),\

struct i2c_registers {
	uint32_t GENERIC_I2C_SETUP;
	uint32_t GENERIC_I2C_SPEED;
	uint32_t GENERIC_I2C_STATUS;
	uint32_t GENERIC_I2C_CONTROL;
	uint32_t GENERIC_I2C_TRANSACTION;
	uint32_t GENERIC_I2C_DATA;
	uint32_t GENERIC_I2C_INTERRUPT_CONTROL;
	uint32_t GENERIC_I2C_PIN_SELECTION;
};

struct i2c_mask {
    uint32_t GENERIC_I2C_GO;
    uint32_t GENERIC_I2C_SOFT_RESET;
    uint32_t GENERIC_I2C_SEND_RESET;
    uint32_t GENERIC_I2C_ENABLE;
    uint32_t GENERIC_I2C_DBG_REF_SEL;
    uint32_t GENERIC_I2C_STATUS;
    uint32_t GENERIC_I2C_DONE;
    uint32_t GENERIC_I2C_ABORTED;
    uint32_t GENERIC_I2C_TIMEOUT;
    uint32_t GENERIC_I2C_STOPPED_ON_NACK;
    uint32_t GENERIC_I2C_NACK;
    uint32_t GENERIC_I2C_THRESHOLD;
    uint32_t GENERIC_I2C_DISABLE_FILTER_DURING_STALL;
    uint32_t GENERIC_I2C_START_STOP_TIMING_CNTL;
    uint32_t GENERIC_I2C_PRESCALE;
    uint32_t GENERIC_I2C_DATA_DRIVE_EN;
    uint32_t GENERIC_I2C_DATA_DRIVE_SEL;
    uint32_t GENERIC_I2C_CLK_DRIVE_EN;
    uint32_t GENERIC_I2C_INTRA_BYTE_DELAY;
    uint32_t GENERIC_I2C_TIME_LIMIT;
    uint32_t GENERIC_I2C_RW;
    uint32_t GENERIC_I2C_STOP_ON_NACK;
    uint32_t GENERIC_I2C_ACK_ON_READ;
    uint32_t GENERIC_I2C_START;
    uint32_t GENERIC_I2C_STOP;
    uint32_t GENERIC_I2C_COUNT;
    uint32_t GENERIC_I2C_DATA_RW;
    uint32_t GENERIC_I2C_DATA;
    uint32_t GENERIC_I2C_INDEX;
    uint32_t GENERIC_I2C_INDEX_WRITE;
    uint32_t GENERIC_I2C_SCL_PIN_SEL;
    uint32_t GENERIC_I2C_SDA_PIN_SEL;
    uint32_t GENERIC_I2C_DONE_INT;
    uint32_t GENERIC_I2C_DONE_ACK;
    uint32_t GENERIC_I2C_DONE_MASK;
};

struct i2c_shift {
    uint8_t GENERIC_I2C_GO;
    uint8_t GENERIC_I2C_SOFT_RESET;
    uint8_t GENERIC_I2C_SEND_RESET;
    uint8_t GENERIC_I2C_ENABLE;
    uint8_t GENERIC_I2C_DBG_REF_SEL;
    uint8_t GENERIC_I2C_STATUS;
    uint8_t GENERIC_I2C_DONE;
    uint8_t GENERIC_I2C_ABORTED;
    uint8_t GENERIC_I2C_TIMEOUT;
    uint8_t GENERIC_I2C_STOPPED_ON_NACK;
    uint8_t GENERIC_I2C_NACK;
    uint8_t GENERIC_I2C_THRESHOLD;
    uint8_t GENERIC_I2C_DISABLE_FILTER_DURING_STALL;
    uint8_t GENERIC_I2C_START_STOP_TIMING_CNTL;
    uint8_t GENERIC_I2C_PRESCALE;
    uint8_t GENERIC_I2C_DATA_DRIVE_EN;
    uint8_t GENERIC_I2C_DATA_DRIVE_SEL;
    uint8_t GENERIC_I2C_CLK_DRIVE_EN;
    uint8_t GENERIC_I2C_INTRA_BYTE_DELAY;
    uint8_t GENERIC_I2C_TIME_LIMIT;
    uint8_t GENERIC_I2C_RW;
    uint8_t GENERIC_I2C_STOP_ON_NACK;
    uint8_t GENERIC_I2C_ACK_ON_READ;
    uint8_t GENERIC_I2C_START;
    uint8_t GENERIC_I2C_STOP;
    uint8_t GENERIC_I2C_COUNT;
    uint8_t GENERIC_I2C_DATA_RW;
    uint8_t GENERIC_I2C_DATA;
    uint8_t GENERIC_I2C_INDEX;
    uint8_t GENERIC_I2C_INDEX_WRITE;
    uint8_t GENERIC_I2C_SCL_PIN_SEL;
    uint8_t GENERIC_I2C_SDA_PIN_SEL;
    uint8_t GENERIC_I2C_DONE_INT;
    uint8_t GENERIC_I2C_DONE_ACK;
    uint8_t GENERIC_I2C_DONE_MASK;
};

struct asic_context {
    const struct i2c_registers  *i2c_registers;
	const struct i2c_shift      *i2c_shifts;
    const struct i2c_mask       *i2c_masks;
};


extern const struct asic_context asic_context_polaris;
extern const struct asic_context asic_context_vega;
extern const struct asic_context asic_context_navi;

#endif
